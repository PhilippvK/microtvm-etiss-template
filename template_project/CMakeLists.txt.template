# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.18)
set(CMAKE_CXX_STANDARD 11)


set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_PROCESSOR ETISS)

# select the toolchain and corresponding CMAKE_TOOLCHAIN_FILE
SET(TOOLCHAIN
    "gcc"
    CACHE STRING "select from llvm and gcc for the compilation."
)
SET_PROPERTY(CACHE TOOLCHAIN PROPERTY STRINGS gcc llvm)
# variable_watch(LLVM_DIR)
SET(CMAKE_TOOLCHAIN_FILE "cmake/toolchain_${TOOLCHAIN}.cmake")

# the following three lines can be deleted because it is repeat in LookupClang.cmake
# they are kept to remind that a copy exists in LookupClang.cmake
SET(LLVM_DIR
    ""
    CACHE PATH "install location for riscv-llvm toolchain"
)

SET(RISCV_ELF_GCC_PREFIX
    ""
    CACHE PATH "install location for riscv-gcc toolchain"
)

SET(RISCV_ELF_GCC_BASENAME
    "riscv32-unknown-elf"
    CACHE STRING "base name of the toolchain executables"
)
SET(RISCV_ARCH
    "rv32imafdc"
    CACHE STRING "march argument to the compiler"
)
SET(RISCV_ABI
    "ilp32d"
    CACHE STRING "mabi argument to the compiler"
)

if("${RISCV_ELF_GCC_PREFIX}" STREQUAL "")
    SET(TC_PREFIX "${RISCV_ELF_GCC_BASENAME}-")
else()
    SET(TC_PREFIX "${RISCV_ELF_GCC_PREFIX}/bin/${RISCV_ELF_GCC_BASENAME}-")
endif()

project(crt_autogenerated_project C CXX)

ADD_DEFINITIONS(-march=${RISCV_ARCH})
ADD_DEFINITIONS(-mabi=${RISCV_ABI})
ADD_DEFINITIONS(-fno-use-cxa-atexit)
ADD_DEFINITIONS(-fno-rtti)
# ADD_DEFINITIONS(-fno-exceptions)
ADD_DEFINITIONS(-fno-threadsafe-statics)
message(STATUS "RISCV_ARCH=${RISCV_ARCH}")
message(STATUS "RISCV_ABI=${RISCV_ABI}")

add_executable(main)

set(CRT_LIB_BASE crt/src/runtime/crt)
set(CRT_LIBS microtvm_rpc_server
  microtvm_rpc_common
  aot_executor_module
  aot_executor
  graph_executor_module
  graph_executor
  common
  memory
)

# Build CRT libraries
foreach(crt_lib_name ${CRT_LIBS})
  add_library(${crt_lib_name})
  file(GLOB_RECURSE crt_lib_srcs ${CRT_LIB_BASE}/${crt_lib_name}/*.c ${CRT_LIB_BASE}/${crt_lib_name}/*.cc)
  target_sources(${crt_lib_name} PRIVATE ${crt_lib_srcs})
  target_include_directories(${crt_lib_name} PRIVATE crt_config crt/include)
  target_compile_definitions(${crt_lib_name} PRIVATE -DTVM_HOST_USE_GRAPH_EXECUTOR_MODULE)
  TARGET_LINK_LIBRARIES(${crt_lib_name} PRIVATE c semihost gcc stdc++)
  target_link_libraries(main PRIVATE ${crt_lib_name})
endforeach(crt_lib_name ${CRT_LIBS})

# Build model files
add_library(tvm_model)
file(GLOB_RECURSE tvm_model_srcs model/codegen/host/src/*.c model/codegen/host/lib/*.o)
target_sources(tvm_model PRIVATE ${tvm_model_srcs})
target_include_directories(tvm_model PRIVATE ${CMAKE_SOURCE_DIR}/include crt_config crt/include)
target_compile_options(tvm_model PRIVATE -Wno-error=unused-variable -Wno-error=missing-braces -Wno-error=unused-const-variable -Wno-unused-variable)
set_target_properties(tvm_model PROPERTIES LINKER_LANGUAGE C)
target_link_libraries(tvm_model PRIVATE m)
target_link_libraries(main PRIVATE tvm_model)

file(GLOB_RECURSE app_srcs src/**.cc)
target_sources(main PRIVATE ${app_srcs} ${cmsis_lib_srcs})
target_compile_definitions(main PRIVATE -DTVM_HOST_USE_GRAPH_EXECUTOR_MODULE)
target_include_directories(main PRIVATE crt_config include ${CMAKE_SOURCE_DIR}/include crt/include)

IF(NOT MEM_ROM_ORIGIN)
    SET(MEM_ROM_ORIGIN 0x0)
ENDIF()
IF(NOT MEM_ROM_LENGTH)
    SET(MEM_ROM_LENGTH 0x800000)
ENDIF()
IF(NOT MEM_RAM_ORIGIN)
    SET(MEM_RAM_ORIGIN 0x800000)
ENDIF()
IF(NOT MEM_RAM_LENGTH)
    SET(MEM_RAM_LENGTH 0x4000000)
ENDIF()
#
set(MIN_STACK_SIZE 0x4000)
set(MIN_HEAP_SIZE 0x4000)

SET(ETISS_LDSCRIPT ${CMAKE_CURRENT_BINARY_DIR}/etiss.ld)
SET(ETISS_LDFLAGS "-L${CMAKE_CURRENT_BINARY_DIR}/riscv_crt0 -T ${ETISS_LDSCRIPT} -nostdlib")

SET(ETISS_CRT_DIR ${CMAKE_CURRENT_LIST_DIR}/cmake/etiss)

ADD_SUBDIRECTORY(${ETISS_CRT_DIR})

CONFIGURE_FILE(${CMAKE_CURRENT_LIST_DIR}/cmake/etiss/etiss.ld.in etiss.ld @ONLY)

ADD_DEPENDENCIES(main etiss_crt0)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${ETISS_LDFLAGS}")
TARGET_LINK_LIBRARIES(main PRIVATE etiss_crt0)
TARGET_LINK_LIBRARIES(main PRIVATE c semihost gcc stdc++)
